---
description: 
globs: 
alwaysApply: false
---
# 🧩 Component Architecture

## 📂 Organization

Components are organized in the `app/components/` directory following a feature-based structure:

```
app/components/
├── layout/           # Structural components (Header, Footer, etc.)
├── shared/           # Reusable UI elements (Button, Card, etc.)
├── blog/             # Blog-specific components
├── projects/         # Project-specific components
├── about/            # About page components
├── animations/       # Animation-related components
│   ├── glitch/       # Glitch effect components
│   └── sparkle/      # Sparkle effect components
└── seo/              # SEO-related components
```

## 🏗️ Component Patterns

### Functional Components with TypeScript

```tsx
import React from 'react';
import styled from 'styled-components';

// Define types/interfaces for props
interface ButtonProps {
  label: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'small' | 'medium' | 'large';
  $customColor?: string; // Prop for styled-components (with $ prefix)
}

// Component implementation
const Button: React.FC<ButtonProps> = ({
  label,
  onClick,
  variant = 'primary',
  size = 'medium',
  $customColor,
}) => {
  return (
    <StyledButton 
      onClick={onClick} 
      $variant={variant} 
      $size={size}
      $customColor={$customColor}
    >
      {label}
    </StyledButton>
  );
};

export default Button;
```

## 🎨 Styling Approach

Components use styled-components with these patterns:

### Styled Component Definitions

```tsx
// Base components with typed props
const StyledButton = styled.button<{
  $variant: 'primary' | 'secondary' | 'ghost';
  $size: 'small' | 'medium' | 'large';
  $customColor?: string;
}>`
  /* Base styles */
  border-radius: 50px;
  border: 2px solid var(--color-primary);
  transition: all 0.3s ease;
  
  /* Size variations */
  padding: ${(props) => {
    switch (props.$size) {
      case 'small': return '0.5rem 1rem';
      case 'large': return '1.5rem 3rem';
      default: return '1rem 2rem';
    }
  }};
  
  /* Variant styles */
  background-color: ${(props) => {
    switch (props.$variant) {
      case 'primary': return 'var(--color-primary)';
      case 'secondary': return 'transparent';
      case 'ghost': return 'transparent';
      default: return 'var(--color-primary)';
    }
  }};
  
  /* Custom color override if provided */
  ${(props) => props.$customColor && `
    color: ${props.$customColor};
    border-color: ${props.$customColor};
  `}
  
  /* Hover effects */
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(162, 89, 255, 0.4);
  }
`;
```

## 🧰 Custom Hooks

Common hooks are stored in `app/hooks/` and follow these patterns:

```tsx
import { useState, useEffect, useCallback } from 'react';

// Hook with proper typing
function useWindowSize() {
  // Define typed state
  const [windowSize, setWindowSize] = useState<{
    width: number | undefined;
    height: number | undefined;
  }>({
    width: undefined,
    height: undefined,
  });
  
  // Memoized event handler
  const handleResize = useCallback(() => {
    setWindowSize({
      width: window.innerWidth,
      height: window.innerHeight,
    });
  }, []);

  useEffect(() => {
    // Handle initial load
    handleResize();
    
    // Add event listener
    window.addEventListener('resize', handleResize);
    
    // Cleanup
    return () => window.removeEventListener('resize', handleResize);
  }, [handleResize]);

  return windowSize;
}

export default useWindowSize;
```

## 🔄 State Management

- Use local component state for UI-specific state
- React Context for theme, user preferences, etc.
- Custom hooks for shared logic and effects

## 🎭 Animation Components

Animation components use Framer Motion with variants:

```tsx
import { motion } from 'framer-motion';

// Animation variants
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.3,
    },
  },
  exit: {
    opacity: 0,
    transition: {
      when: 'afterChildren',
    },
  },
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.5,
      ease: 'easeOut',
    },
  },
  exit: {
    y: -20,
    opacity: 0,
    transition: {
      duration: 0.3,
    },
  },
};

const AnimatedList: React.FC<{ items: string[] }> = ({ items }) => {
  return (
    <motion.ul
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      {items.map((item, index) => (
        <motion.li key={index} variants={itemVariants}>
          {item}
        </motion.li>
      ))}
    </motion.ul>
  );
};
```

## 📡 Data Fetching

Next.js data fetching patterns:

```tsx
// Using React Server Components
async function fetchProjectData() {
  // Server-side data fetching
  const response = await fetch('https://api.example.com/data');
  return response.json();
}

// In page component
export default async function ProjectPage() {
  const data = await fetchProjectData();
  
  return (
    <div>
      {/* Render with fetched data */}
    </div>
  );
}
```

## 🧪 Testing Components

Component tests with React Testing Library:

```tsx
import { render, screen, fireEvent } from '@testing-library/react';
import Button from './Button';

describe('Button component', () => {
  it('renders correctly with label', () => {
    render(<Button label="Click me" onClick={() => {}} />);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button label="Click me" onClick={handleClick} />);
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

