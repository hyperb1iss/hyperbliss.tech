---
description: Guidelines for creating and maintaining blog posts in the hyperbliss.tech website
globs: src/posts/**/*.md
alwaysApply: false
---
# 📝 Blog Content Guidelines

## 📂 Organization

Blog posts are stored as Markdown files in the `src/posts/` directory. Each post has its own file with frontmatter metadata and content.

## 📝 File Structure

Blog posts follow this naming convention:
- `YYYY-MM-DD-post-title.md` - Files begin with the publication date
- Lowercase with hyphens for the title portion
- Should match the intended URL slug (minus the date part)

## 🔍 Frontmatter Schema

Each blog post requires these frontmatter fields:

```md
---
title: "Post Title"
description: "Brief description for previews and SEO"
date: "YYYY-MM-DD"
tags: ["tag1", "tag2", "tag3"]
featured: true|false
cover: "/images/blog/post-title-cover.jpg"
---
```

### Required Fields:
- `title`: Display title of the post
- `description`: Brief summary for cards and meta description
- `date`: Publication date (YYYY-MM-DD)
- `tags`: Array of relevant topic tags
- `cover`: Path to cover image (stored in `public/images/blog/`)

### Optional Fields:
- `featured`: Boolean for highlighting on homepage
- `author`: If different from site owner
- `updated`: Date of last significant update
- `readingTime`: Manual override for read time (auto-calculated by default)

## 🌈 Content Guidelines

### Formatting

- Use heading levels appropriately (H2 for major sections, H3 for subsections)
- Keep paragraphs concise and focused (3-5 sentences)
- Use code blocks with language specifiers for syntax highlighting
- Include visual breaks between major sections (horizontal rules or spacing)

### Content Style

- Technical content should be precise but approachable
- Include code examples for technical tutorials
- Add explanation for complex concepts
- Use personal anecdotes where relevant
- Maintain the site's playful, warm, technical voice

### Media

- Use images to illustrate complex concepts
- Store post images in `public/images/blog/[post-slug]/`
- Include diagrams for technical explanations when helpful
- Add alt text to all images for accessibility
- Optimize images for web (WebP format preferred)

## 💫 Rich Content Features

Blog posts support:
- Syntax highlighted code blocks with Prism.js
- Mathematics with KaTeX
- Embedded tweets and videos
- Github Flavored Markdown (tables, strikethrough, etc.)
- Custom React components via MDX

## 🔍 SEO Optimization

Each blog post automatically generates:
- OpenGraph meta tags from frontmatter
- Twitter card data
- Structured data for Google
- An entry in the site's RSS feed

## 📊 Display Components

Blog posts are displayed using these components:
- `BlogList.tsx`: Grid layout of post cards on the blog page
- `BlogCard.tsx`: Individual post preview card
- `BlogPostContent.tsx`: Full post view with content
- `TagList.tsx`: Displays and filters posts by tag